"""
Django settings for private_diary project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
import environ
from pathlib import Path

from django.contrib.messages import constants as messages

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

STATICFILES_DIRS=(
    os.path.join(BASE_DIR,'static'),
)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'diary.apps.DiaryConfig',
    'accounts.apps.AccountsConfig',

    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'django_bootstrap5',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "private_diary.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "private_diary.wsgi.application"



# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

if os.environ.get('GAE_APPLICATION', None):
    # 本番環境（GCP）
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            "NAME": "private_diary",
            "USER": os.environ.get("DB_USER"),
            "PASSWORD": os.environ.get("DB_PASSWORD"),
            'HOST': '/cloudsql/redrockdiary:us-central1:diarybase',
        }
    }
else:
    # 開発環境
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            "NAME": "private_diary",
            "USER": 'eredrock',
            "PASSWORD": '1204noShiru',
            'HOST': '127.0.0.1',
            'PORT': '3306',
        }
    }


#CSRF設定
from urllib.parse import urlparse
env = environ.Env(DEBUG=(bool, False))

APPENGINE_URL = env("APPENGINE_URL", default=None)
if APPENGINE_URL:
    # Ensure a scheme is present in the URL before it's processed.
    if not urlparse(APPENGINE_URL).scheme:
        APPENGINE_URL = f"https://{APPENGINE_URL}"

    ALLOWED_HOSTS = [urlparse(APPENGINE_URL).netloc]
    CSRF_TRUSTED_ORIGINS = [APPENGINE_URL]
    SECURE_SSL_REDIRECT = True
else:
    ALLOWED_HOSTS = ["*"]


AUTH_USER_MODEL='accounts.CustomUser'

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "ja"

TIME_ZONE = "Asia/Tokyo"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

MESSAGE_TAGS={
    messages.ERROR: 'alert alert-danger',
    messages.WARNING: 'alert alert-warning',
    messages.SUCCESS: 'alert alert-success',
    messages.INFO: 'alert alert-info',
}

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'  # メールサーバーのホスト名
EMAIL_PORT = 587  # メールサーバーのポート番号
EMAIL_USE_TLS = True  # TLSを使用する場合はTrueに設定
EMAIL_HOST_USER = os.environ.get('FROM_EMAIL')  # メールアカウントのユーザー名
EMAIL_HOST_PASSWORD =  os.environ.get('FROM_EMAIL_PASS')# メールアカウントのパスワード
DEFAULT_FROM_EMAIL=os.environ.get('FROM_EMAIL') #デフォルトのメール送信元を設定


#django-allauthで利用するdjango.contrib.sitesを使うためにサイト識別用IDを設定
SITE_ID=1 

AUTHENTICATION_BACKENDS={
    'allauth.account.auth_backends.AuthenticationBackend',#一般ユーザー用
    'django.contrib.auth.backends.ModelBackend',#管理サイト用
}

#メールアドレス認証に変更する設定
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_USERNAME_REQUIRED=False

#サインアップにメールアドレス確認をはさむよう設定
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'  # メールの確認方法
ACCOUNT_EMAIL_REQUIRED = True  # メールアドレスが必要かどうか

#ログイン/ログアウト後の遷移先を設定
LOGIN_REDIRECT_URL='diary:index'
ACCOUNT_LOGOUT_REDIRECT_URL='account_login'

#ログアウトリンクのクリック一発でログアウトする設定
ACCOUNT_LOGOUT_ON_GET=True

#django-allauthが送信するメールの件名に自動付与される接頭辞をブランクにする設定
ACCOUNT_EMAIL_SUBJECT_PREFIX=''


MEDIA_URL='/media/'

#ログイン/ログアウト後の遷移先を設定
LOGIN_REDIRECT_URL='diary:diary_list'

#バックアップバッチ用
BACKUP_PATH='backup/'
NUM_SAVED_BACKUP=30

# セッションストレージを有効にするための設定
SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # データベースベースセッションバックエンド

# セッションに使用するクッキー名を指定（任意）
SESSION_COOKIE_NAME = 'redrock_session_cookie'

# セッションの有効期限を設定（任意）
# デフォルトでは、ブラウザを閉じるとセッションが破棄されます。
SESSION_COOKIE_AGE = 1209600  # 2週間（秒単位）
